import hudson.scm.ChangeLogSet
import hudson.plugins.git.GitChangeSet
import static hudson.plugins.git.GitChangeSet.Path

node {
    def kaynnistaja
    // Tätä Build User Vars Plugin plugaria ei tarvisi, jos JENKINS-41272 issue saataisiin jossain väli tehtyä
    wrap([$class: 'BuildUser']) {
        kaynnistaja = sh([script      : 'echo ${BUILD_USER}',
                          returnStdout: true])
    }
    println "KÄYNNISTÄJÄ: " + kaynnistaja
    // Pitää wrapata koko pipeline tämmöisen funktion taakse, koska git polling plugarissa on bugi JENKINS-30350
    // ja lisäksi se pollailee kaikkia repoja JENKINS-41674.
    if (muutosTapahtuiHarjaan(kaynnistaja)) {
        // Lisää mvn pathiin
        env.PATH = "${env.JENKINS_HOME}/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.5.4/bin:${env.PATH}"

        // Stage nimet
        String testikannanLuonti = 'Luo testikanta'
        String jarJaTestit = 'Luo JAR ja aja testit'
        String testiserverinKannanLuonti = 'Luo testiserverin kanta'
        String testiserverinAppLuonti = 'Luo testiserverin app'
        String e2eTestit = 'Aja E2E testit'

        def buildNumberJenkinsille
        if (params.ARCHIVE_BUILD_NUMBER) {
            if (onkoTiedostoOlemassa("${env.JENKINS_HOME}/jobs/testi-pipeline/builds/" + params.ARCHIVE_BUILD_NUMBER + "/archive/target/harja-*-standalone.jar")) {
                sh([script: "echo KÄYTETÄÄN JARRIA BUILD NUMBERISTA: " + params.ARCHIVE_BUILD_NUMBER])
                buildNumberJenkinsille = params.ARCHIVE_BUILD_NUMBER
            } else {
                sh([script: "echo EI KÄYTETÄ MÄÄRITETTYÄ BUILD NUMBERIA, KOSKA SE EI SISÄLLÄ JARRIA!"])
                slackSend([color  : 'warning',
                           message: "Pipeline buildissa ${env.BUILD_NUMBER} ei käytetä käyttäjän määrittämän build numberin jarria, koska sitä ei ole olemassa."])
                buildNumberJenkinsille = currentBuild.number
            }
        } else {
            buildNumberJenkinsille = currentBuild.number
        }

        dir('Harja') {
            checkout scm;
            /*
             * TESTIKANNAN LUOMINEN
             */

            stage(testikannanLuonti) {
                try {
                    sh([script: "sh Jenkins/skriptit/testitietokanta.sh"])
                } catch (e) {
                    env.FAILED_STAGE = testikannanLuonti
                    error([message: "Testikannan pystytys epäonnistui."])
                }
            }

            /*
             * TESTIEN AJAMINEN JA JAR:IN LUOMINEN
             */

            stage(jarJaTestit) {
                try {
                    String muutokset = changeSets2String()
                    // Luo API docsit
                    sh([script: "sh Jenkins/skriptit/luo-API-docsit.sh"])
                    // Luo jarri ja aja testit
                    sh([script: "lein tuotanto"])
                    // Säilötään se jarri
                    archiveArtifacts([artifacts: 'target/harja-*-standalone.jar, doc/*'])
                    mail([from   : params.LAHETTAJA_SPOSTI,
                          replyTo: '',
                          to     : params.VASTAANOTTAJAT_SPOSTI,
                          cc     : '',
                          bcc    : '',
                          subject: "Pipelinen ajaminen epäonnistui ${env.BUILD_NUMBER}",
                          body   : "Build: ${env.BUILD_URL}\n" + muutokset])
                    // Testitulokset
                    junit([testResults: 'test2junit/xml/*.xml'])
                    // Jos edellinen buildi hajosi ja tämä buildi korjasi sen, niin lähetetään viesti Slackiin
                    if (currentBuild.previousBuild.buildVariables.FAILED_STAGE == jarJaTestit) {
                        slackSend([color  : 'good',
                                   message: 'Pipeline ei enään hajoa `lein tuotanto` komennon kohdalla'])
                    }
                } catch (e) {
                    env.FAILED_STAGE = jarJaTestit
                    junit([testResults: 'test2junit/xml/*.xml'])
                    slackSend([color  : 'warning',
                               message: 'Pipeline hajosi `lein tuotanto` komennon kohdalla'])
                    error([message: "'lein tuotanto' epäonnistui"])
                }
            }

            /*
             * TESTISERVERIKANNAN LUOMINEN
             */

            stage(testiserverinKannanLuonti) {
                try {
                    withCredentials([usernamePassword(credentialsId: 'TESTIPANNU', passwordVariable: 'SALASANA', usernameVariable: 'KAYTTAJA')]) {
                        // Halutessaan withMaven:in avulla voi määritellä conffi filet, mutta käytetään defaultteja
                        withMaven(jdk: '', maven: 'Maven 3.5.4') {
                            sh([script: "mvn -f tietokanta/pom.xml clean compile flyway:migrate" +
                                    " -Dflyway.baselineOnMigrate=true -Dflyway.baselineVersion=0" +
                                    " -Dflyway.url=jdbc:postgresql://harja-db1-test/harja -Dflyway.user=$KAYTTAJA -Dflyway.password=$SALASANA"])
                        }
                    }
                } catch (e) {
                    env.FAILED_STAGE = testiserverinKannanLuonti
                    error([message: "Testiserverin kannan pystytys epäonnistui."])
                }
            }
        }

        dir('CI') {
            resolveScm([source : [$class       : 'GitSCMSource',
                                  credentialsId: '',
                                  id           : '_',
                                  remote       : params.HARJA_CI_URL,
                                  traits       : [[$class: 'BranchDiscoveryTrait']]],
                        targets: ['master']])
            //checkout([$class: 'GitSCM',
            //          branches: [[name: '*/master']],
            //          doGenerateSubmoduleConfigurations: false,
            //          extensions: [],
            //          submoduleCfg: [],
            //          userRemoteConfigs: [[url: params.HARJA_CI_URL]]])
            /*
             * TESTISERVERIAPPIKSEN DEPLOYAAMINEN
             */

            stage(testiserverinAppLuonti) {
                try {
                    ansiblePlaybook([installation: 'ansible 1.9.1',
                                     inventory   : 'inventory/testing',
                                     playbook    : 'playbooks/nightly.yml',
                                     extras      : "jenkins_build_number=" + buildNumberJenkinsille])
                } catch (e) {
                    env.FAILED_STAGE = testiserverinAppLuonti
                    error([message: "Testiserverin app pystytys epäonnistui."])
                }
            }
        }

        dir('E2E') {
            resolveScm([source : [$class       : 'GitSCMSource',
                                  credentialsId: '',
                                  id           : '_',
                                  remote       : params.HARJA_E2E_URL,
                                  traits       : [[$class: 'BranchDiscoveryTrait']]],
                        targets: ['develop']])
            //checkout([$class: 'GitSCM',
            //          branches: [[name: '*/develop']],
            //          doGenerateSubmoduleConfigurations: false,
            //          extensions: [],
            //          submoduleCfg: [],
            //          userRemoteConfigs: [[url: params.HARJA_E2E_URL]]])

            /*
             * E2E TESTIT
             */
            stage(e2eTestit) {
                try {
                    wrap([$class: 'Xvfb']) {
                        retry(5) {
                            timeout(20) {
                                sh([script: "lein do clean, compile, test2junit"])
                            }
                        }
                    }
                    junit([testResults: 'test2junit/xml/*.xml'])
                    if (currentBuild.previousBuild.buildVariables.FAILED_STAGE == e2eTestit) {
                        slackSend([color  : 'good',
                                   message: 'E2E-testit normalisoitui'])
                    }
                } catch (e) {
                    env.FAILED_STAGE = e2eTestit
                    junit([testResults: 'test2junit/xml/*.xml'])
                    slackSend([color  : 'warning',
                               message: 'Pipeline hajosi: E2E-testit epäonnistuivat'])
                    error([message: "E2E-testit epäonnistuivat"])
                }
            }
        }

        /*
         * SIIVOTAAN WORKSPACE
         */

        stage('Siivoa workspace') {
            cleanWs()
        }
        // Harja-e2e
        // build env
        // Xvfb
        // abort if stuck 20min tries 2
        // build
        // do clean, compile, test2junit
        // After
        // JUnit
        // Retry 5min delay, 3 failed tries
        // Slack on fail and back to normal
        // harja-staging-db
        // harja-staging-app
        // General
        // keep builds for 7 days
        // harja-prod-db
        // harja-prod-app
        // ajetaan?
        // 7am arkisin
        // slack kun build start, faiure, success, back to normal
        // API Docsit pitää laittaa jossain väli
    }
}

@NonCPS
def changeSets2String() {
    def muutokset = currentBuild.changeSets
    println "MUUTOKSET: " + muutokset
    def teksti = ""
    for (ChangeLogSet muutos : muutokset) {
        for (GitChangeSet kentta : muutos.getItems()) {
            Collection<GitChangeSet.Path> polut = kentta.getAffectedFiles()
            GitChangeSet.Path polku
            if (!polut.isEmpty()) {
                polku = polut.get(0)
                println "DEST: " + polku.getDest()
                println "SRC: " + polku.getSrc()
                println "PATH: " + polku.getPath()
            }
            teksti = teksti + "[" + kentta.getAuthorName() + "] " + kentta.getMsg() + "\n"
        }
    }
    return teksti
}

def onkoTiedostoOlemassa(absolutePath) {
    loytyikoTiedosto = sh([script      : "[ -f " + absolutePath + " ]",
                           returnStatus: true])
    return loytyikoTiedosto == 0
}

@NonCPS
def muutosTapahtuiHarjaan(kaynnistaja) {
    def muutokset = currentBuild.changeSets
    // Onko pollaus lauennu turhan takia
    if (muutokset.isEmpty() && kaynnistaja == "") {
        return false
    } else if (muutokset.isEmpty()) {
        return true
    } else {
        def polku = muutokset.get(0).getItems().get(0).getPaths().get(0)
        println "DEST: " + polku.getDest()
        println "SRC: " + polku.getSrc()
        return true
    }
}
