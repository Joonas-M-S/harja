import hudson.scm.ChangeLogSet
import hudson.plugins.git.GitChangeSet
import static hudson.plugins.git.GitChangeSet.Path

node {
    def kaynnistaja
    // Tätä Build User Vars Plugin plugaria ei tarvisi, jos JENKINS-41272 issue saataisiin jossain väli tehtyä
    wrap([$class: 'BuildUser']) {
        kaynnistaja = sh([script      : 'echo ${BUILD_USER}',
                          returnStdout: true])
    }
    println "KÄYNNISTÄJÄ: " + kaynnistaja
    // Pitää wrapata koko pipeline tämmöisen funktion taakse, koska git polling plugarissa on bugi JENKINS-30350
    // ja lisäksi se pollailee kaikkia repoja JENKINS-41674.
    if (muutosTapahtuiHarjaan(kaynnistaja)) {
        // Lisää mvn pathiin
        env.PATH = "${env.JENKINS_HOME}/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.5.4/bin:${env.PATH}"

        // Stage nimet
        String testikannanLuonti = 'Luo testikanta'
        String jarJaTestit = 'Luo JAR ja aja testit'
        String testiserverinKannanLuonti = 'Luo testiserverin kanta'
        String testiserverinAppLuonti = 'Luo testiserverin app'
        String e2eTestit = 'Aja E2E testit'

        // Mitkä staget ajetaan
        Boolean testikannanLuontiAjetaan = STAGE_ETIAPAIN == "Kaikki"
        Boolean jarJaTestitAjetaan = ["Kaikki", "JAR ja testit"].contains(STAGE_ETIAPAIN)
        Boolean testiserverinKannanLuontiAjetaan = ["Kaikki", "JAR ja testit", "Testiserveri"].contains(STAGE_ETIAPAIN)
        Boolean testiserverinAppLuontiAjetaan = ["Kaikki", "JAR ja testit", "Testiserveri"].contains(STAGE_ETIAPAIN)
        Boolean e2eTestitAjetaan = ["Kaikki", "JAR ja testit", "Testiserveri", "E2E"].contains(STAGE_ETIAPAIN)

        dir('Harja') {
            checkout scm;
            /*
             * TESTIKANNAN LUOMINEN
             */

            stage(testikannanLuonti) {
                if (testikannanLuontiAjetaan) {
                    try {
                        sh([script: "sh Jenkins/skriptit/testitietokanta.sh"])
                    } catch (e) {
                        env.FAILED_STAGE = testikannanLuonti
                        error([message: "Testikannan pystytys epäonnistui."])
                    }
                }
            }

            /*
             * TESTIEN AJAMINEN JA JAR:IN LUOMINEN
             */

            stage(jarJaTestit) {
                if (jarJaTestitAjetaan) {
                    try {
                        String muutokset = changeSets2String()
                        // Luo API docsit
                        sh([script: "sh Jenkins/skriptit/luo-API-docsit.sh"])
                        // Luo jarri ja aja testit
                        sh([script: "lein tuotanto"])
                        // Säilötään se jarri
                        archiveArtifacts([artifacts: 'target/harja-*-standalone.jar, doc/*'])
                        // Testitulokset
                        junit([testResults: 'test2junit/xml/*.xml'])
                        // Jos edellinen buildi hajosi ja tämä buildi korjasi sen, niin lähetetään viesti Slackiin
                        if (currentBuild.previousBuild.buildVariables.FAILED_STAGE == jarJaTestit) {
                            slackSend([color  : 'good',
                                       message: 'Pipeline ei enään hajoa `lein tuotanto` komennon kohdalla'])
                        }
                    } catch (e) {
                        env.FAILED_STAGE = jarJaTestit
                        junit([testResults: 'test2junit/xml/*.xml'])
                        mail([from   : params.LAHETTAJA_SPOSTI,
                              replyTo: '',
                              to     : params.VASTAANOTTAJAT_SPOSTI,
                              cc     : '',
                              bcc    : '',
                              subject: "Pipelinen ajaminen epäonnistui ${env.BUILD_NUMBER}",
                              body   : "Build: ${env.BUILD_URL}\n" + muutokset])
                        slackSend([color  : 'warning',
                                   message: 'Pipeline hajosi `lein tuotanto` komennon kohdalla'])
                        error([message: "'lein tuotanto' epäonnistui"])
                    }
                }
            }

            /*
             * TESTISERVERIKANNAN LUOMINEN
             */

            stage(testiserverinKannanLuonti) {
                if (testiserverinKannanLuontiAjetaan) {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'TESTIPANNU', passwordVariable: 'SALASANA', usernameVariable: 'KAYTTAJA')]) {
                            // Halutessaan withMaven:in avulla voi määritellä conffi filet, mutta käytetään defaultteja
                            withMaven(jdk: '', maven: 'Maven 3.5.4') {
                                sh([script: "mvn -f tietokanta/pom.xml clean compile flyway:migrate" +
                                        " -Dflyway.baselineOnMigrate=true -Dflyway.baselineVersion=0" +
                                        " -Dflyway.url=jdbc:postgresql://harja-db1-test/harja -Dflyway.user=$KAYTTAJA -Dflyway.password=$SALASANA"])
                            }
                        }
                    } catch (e) {
                        env.FAILED_STAGE = testiserverinKannanLuonti
                        error([message: "Testiserverin kannan pystytys epäonnistui."])
                    }
                }
            }
        }

        def jenkinsinBuildNumber
        if (params.ARCHIVE_BUILD_NUMBER) {
            jenkinsinBuildNumber = params.ARCHIVE_BUILD_NUMBER
        } else {
            jenkinsinBuildNumber = currentBuild.number
        }
        if (!onkoTiedostoOlemassa("${env.JENKINS_HOME}/jobs/Harja-pipeline/builds/" + jenkinsinBuildNumber + "/archive/target/harja-*-standalone.jar")) {
            int nykyinenBuildNumber
            def loytynytJarBuild = null
            for (nykyinenBuildNumber = currentBuild.number; nykyinenBuildNumber >= 0; nykyinenBuildNumber--) {
                if (!onkoTiedostoOlemassa("${env.JENKINS_HOME}/jobs/Harja-pipeline/builds/" + nykyinenBuildNumber + "/archive/target/harja-*-standalone.jar")) {
                    continue
                }
                loytynytJarBuild = nykyinenBuildNumber
                break
            }
            if (loytynytJarBuild) {
                sh([script: "echo Määritetyn buildin jarria (" + jenkinsinBuildNumber + ") ei löytynyt. Käytetään sen sijaan buildin (" + loytynytJarBuild + ") jarria"])
                jenkinsinBuildNumber = loytynytJarBuild
            } else {
                sh([script: "Yhtään jarria ei löytynyt Jenkinsistä!"])
                error([message: "Jarreja ei löytynyt."])
            }
        }

        dir('CI') {
            checkout([$class                           : 'GitSCM',
                      branches                         : [[name: '*/master']],
                      doGenerateSubmoduleConfigurations: false,
                      extensions                       : [],
                      submoduleCfg                     : [],
                      userRemoteConfigs                : [[url: params.HARJA_CI_URL]]])
            /*
             * TESTISERVERIAPPIKSEN DEPLOYAAMINEN
             */

            stage(testiserverinAppLuonti) {
                if (testiserverinAppLuontiAjetaan) {
                    try {
                        ansiblePlaybook([installation: 'ansible 1.9.1',
                                         inventory   : 'inventory/testing',
                                         playbook    : 'playbooks/nightly.yml',
                                         extraVars   : "jenkins_build_number=" + jenkinsinBuildNumber])
                    } catch (e) {
                        env.FAILED_STAGE = testiserverinAppLuonti
                        error([message: "Testiserverin app pystytys epäonnistui."])
                    }
                }
            }
        }

        dir('E2E') {
            checkout([$class                           : 'GitSCM',
                      branches                         : [[name: '*/develop']],
                      doGenerateSubmoduleConfigurations: false,
                      extensions                       : [],
                      submoduleCfg                     : [],
                      userRemoteConfigs                : [[url: params.HARJA_E2E_URL]]])

            /*
             * E2E TESTIT
             */
            stage(e2eTestit) {
                if (e2eTestitAjetaan) {
                    try {
                        wrap([$class: 'Xvfb']) {
                            retry(5) {
                                timeout(20) {
                                    sh([script: "lein do clean, compile, test2junit"])
                                }
                            }
                        }
                        junit([testResults: 'test2junit/xml/*.xml'])
                        if (currentBuild.previousBuild.buildVariables.FAILED_STAGE == e2eTestit) {
                            slackSend([color  : 'good',
                                       message: 'E2E-testit normalisoitui'])
                        }
                    } catch (e) {
                        env.FAILED_STAGE = e2eTestit
                        junit([testResults: 'test2junit/xml/*.xml'])
                        slackSend([color  : 'warning',
                                   message: 'Pipeline hajosi: E2E-testit epäonnistuivat'])
                        error([message: "E2E-testit epäonnistuivat"])
                    }
                }
            }
        }

        /*
         * SIIVOTAAN WORKSPACE
         */

        stage('Siivoa workspace') {
            cleanWs()
        }
        // harja-staging-db
        // harja-staging-app
        // General
        // keep builds for 7 days
        // harja-prod-db
        // harja-prod-app
        // ajetaan?
        // 7am arkisin
        // slack kun build start, faiure, success, back to normal
        // API Docsit pitää laittaa jossain väli
    }
}

@NonCPS
def changeSets2String() {
    def muutokset = currentBuild.changeSets
    def teksti = ""
    for (ChangeLogSet muutos : muutokset) {
        for (GitChangeSet kentta : muutos.getItems()) {
            def tekija
            def viesti
            try {
                tekija = kentta.getAuthor()
            } catch (e) {
                tekija = "Unknown"
            }
            try {
                viesti = kentta.getMsg()
            } catch (e) {
                viesti = "Unkown"
            }
            teksti = teksti + "[" + tekija + "] " + viesti + "\n"
        }
    }
    return teksti
}

def onkoTiedostoOlemassa(absolutePath) {
    loytyikoTiedosto = sh([script      : "[ -f " + absolutePath + " ]",
                           returnStatus: true])
    return loytyikoTiedosto == 0
}

def hyvaksyttyPolku(String polku) {
    // Elikkä git pollaus pollailee kaikkia tässä filussa checkoutattuihin repoihin.
    // Määrritellään tässä, että kun muutos tapahtuu jossain tietyssä polussa, niin ajetaan
    // putki vain silloin.
    def hyvaksytytPolut = ["src/", "resources/", "Jenkins/"]
    def eiHyvaksytytPolut = ["src/harja/e2e/"]
    def hyvaksyttyPolkub = false
    for (String hp : hyvaksytytPolut) {
        def hpr = "^" + hp.replaceAll(~/\//, "\\\\/")
        def hpm = (polku =~ ~hpr)
        if (hpm.getCount() != 0) {
            for (String ehp : eiHyvaksytytPolut) {
                def ehpr = "^" + ehp.replaceAll(~/\//, "\\\\/")
                def ehpm = (polku =~ ~ehpr)
                if (ehpm.getCount() != 0) {
                    return false
                }
            }
            hyvaksyttyPolkub = true
        }
    }
    return hyvaksyttyPolkub
}

@NonCPS
def muutosTapahtuiHarjaan(kaynnistaja) {
    def muutokset = currentBuild.changeSets
    // Onko pollaus lauennu turhan takia
    if (muutokset.isEmpty() && kaynnistaja == "") {
        return false
    } else if (muutokset.isEmpty()) {
        return true
    } else {
        // Tarkistetaan polku
        for (ChangeLogSet muutos : muutokset) {
            for (GitChangeSet kentta : muutos.getItems()) {
                def polut
                try {
                    polut = kentta.getAffectedPaths()
                } catch (e) {
                    continue
                }
                for (String polku : polut) {
                    if (hyvaksyttyPolku(polut)) {
                        return true
                    }
                }
            }
        }
        return false
    }
}
