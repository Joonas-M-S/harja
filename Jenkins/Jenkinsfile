import hudson.scm.ChangeLogSet

node {
    // Lisää mvn pathiin
    env.PATH = "${env.JENKINS_HOME}/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.5.4/bin:${env.PATH}"

    // Stage nimet
    String testikannanLuonti = 'Luo testikanta'
    String jarJaTestit = 'Luo JAR ja aja testit'
    String testiserverinKannanLuonti = 'Luo testiserverin kanta'
    String testiserverinAppLuonti = 'Luo testiserverin app'

    dir('Harja') {
        checkout scm;
        /*
         * TESTIKANNAN LUOMINEN
         */

        try {
            stage(testikannanLuonti) {
                sh([script: "sh Jenkins/skriptit/testitietokanta.sh"])
            }
        } catch (e) {
            env.FAILED_STAGE = testikannanLuonti
            error([message: "Testikannan pystytys epäonnistui."])
        }

        /*
         * TESTIEN AJAMINEN JA JAR:IN LUOMINEN
         */

        try {
            stage(jarJaTestit) {
                // Luo API docsit
                sh([script: "sh Jenkins/skriptit/luo-API-docsit.sh"])
                // Luo jarri ja aja testit
                sh([script: "lein tuotanto"])
                // Säilötään se jarri
                archiveArtifacts([artifacts: 'target/harja-*-standalone.jar, doc/*'])
                // Testitulokset
                junit([testResults: 'test2junit/xml/*.xml'])
                // Jos edellinen buildi hajosi ja tämä buildi korjasi sen, niin lähetetään viesti Slackiin
                if (currentBuild.previousBuild.buildVariables.FAILED_STAGE == jarJaTestit) {
                    slackSend([color  : 'good',
                               message: 'Pipeline ei enään hajoa `lein tuotanto` komennon kohdalla'])
                }
            }
        } catch (e) {
            env.FAILED_STAGE = jarJaTestit
            mail([from   : params.LAHETTAJA_SPOSTI,
                  replyTo: '',
                  to     : params.VASTAANOTTAJAT_SPOSTI,
                  cc     : '',
                  bcc    : '',
                  subject: 'Pipelinen ajaminen epäonnistui ${env.BUILD_NUMBER}',
                  body   : "Build: ${env.BUILD_URL}\n" + changeSets2String(currentBuild.changeSets)])
            slackSend([color  : 'warning',
                       message: 'Pipeline hajosi `lein tuotanto` komennon kohdalla'])
            error([message: "'lein tuotanto' epäonnistui"])
        }

        /*
         * TESTISERVERIKANNAN LUOMINEN
         */

        try {
            stage(testiserverinKannanLuonti) {
                withCredentials([usernamePassword(credentialsId: 'TESTIPANNU', passwordVariable: 'SALASANA', usernameVariable: 'KAYTTAJA')]) {
                    // Halutessaan withMaven:in avulla voi määritellä conffi filet, mutta käytetään defaultteja
                    withMaven(jdk: '', maven: 'Maven 3.5.4') {
                        sh([script: "mvn -f tietokanta/pom.xml clean compile flyway:migrate" +
                                    " -Dflyway.baselineOnMigrate=true -Dflyway.baselineVersion=0" +
                                    " -Dflyway.url=jdbc:postgresql://harja-db1-test/harja -Dflyway.user=$KAYTTAJA -Dflyway.password=$SALASANA"])
                    }
                }
            }
        } catch (e) {
            env.FAILED_STAGE = testiserverinKannanLuonti
            error([message: "Testiserverin kannan pystytys epäonnistui."])
        }
    }

    dir('CI') {
        checkout([$class: 'GitSCM',
                  branches: [[name: '*/master']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [],
                  submoduleCfg: [],
                  userRemoteConfigs: [[url: params.HARJA_CI_URL]]])
        /*
         * TESTISERVERIAPPIKSEN DEPLOYAAMINEN
         */

        try {
            stage(testiserverinAppLuonti) {
                ansiblePlaybook([installation: 'ansible 1.9.1',
                                 inventory   : 'inventory/testing',
                                 playbook    : 'playbooks/nightly.yml'])
            }
        } catch (e) {
            env.FAILED_STAGE = testiserverinAppLuonti
            error([message: "Testiserverin app pystytys epäonnistui."])
        }

        /*
         * E2E testit
         */
    }

    /*
     * SIIVOTAAN WORKSPACE
     */

    stage('Siivoa workspace') {
        cleanWs()
    }
  // Harja-e2e
    // build env
      // Xvfb
      // abort if stuck 20min tries 2
    // build
      // do clean, compile, test2junit
    // After
      // JUnit
      // Retry 5min delay, 3 failed tries
      // Slack on fail and back to normal
  // harja-staging-db
  // harja-staging-app
    // General
      // keep builds for 7 days
  // harja-prod-db
    // harja-prod-app
    // ajetaan?
    // 7am arkisin
    // slack kun build start, faiure, success, back to normal
    // API Docsit pitää laittaa jossain väli

}

String changeSets2String(ChangeLogSet<?> muutokset) {
    StringBuilder sb = new StringBuilder()
    for (Object muutos : muutokset) {
        sb.append("[" + muutos.author + "]")
        sb.append(" " + muutos.msg + "\n")
    }
    sb.toString()
}

Boolean onkoTiedostoOlemassa(absolutePath) {
    loytyikoTiedosto = sh([script      : "[ -f " + absolutePath + " ]",
                           returnStatus: true])
    loytyikoTiedosto == 0
}
